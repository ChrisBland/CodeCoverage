{
  "name": "passport-forcedotcom",
  "version": "0.0.2",
  "description": "Salesforce.com/Force.com/Database.com authentication strategy for Passport.",
  "author": {
    "name": "Joshua Birk",
    "email": "joshua.birk@salesforce.com",
    "url": "http://www.jaredhanson.net/"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/joshbirk/passport-forcedotcom.git"
  },
  "main": "./lib/passport-forcedotcom",
  "dependencies": {
    "passport-oauth": ">= 0.1.2"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "keywords": [
    "passport",
    "salesforce",
    "salesforce.com",
    "force.com",
    "database.com",
    "auth",
    "authn",
    "authentication",
    "identity"
  ],
  "readme": "<h1>passport-forcedotcom</h1>\n<p align=\"center\">\n![image](https://raw.github.com/joshbirk/passport-forcedotcom/master/images/sf.png)\n\nThis is a Strategy for use with http://passportjs.org with the Force.com platform (meaning you can use it with Saleforce CRM, your Force.com applications and Database.com).  With Jared Hanson's help - it properly resolves a previous issue with handling the incoming OAuth information so that things like the instance_url can be readily available.\n\n###Usage\n\n1. Download this as npm module.\n\n```javascript\nnpm install passport-forcedotcom\n```\n\n2 Import it in your app.\n```javascript\n\nvar passport = require('passport')\n  , ForceDotComStrategy = require('passport-forcedotcom').Strategy\n  \n ```\n\n\n3. Define the strategy with your application credentials and information:\n\n ```javascript\n \n passport.use(new ForceDotComStrategy({\n    clientID: '{clientID}',\n    clientSecret: '{clientSecret}',\n    callbackURL: '{callbackUrl}'\n  },\n  function(token, tokenSecret, profile, done) {\n    console.log(profile);\n    return done(null, profile);\n  }\n));\n\n```\n\n4. And then setup some routes to hande the flow:\n\n```javascript\n\napp.get('/login', passport.authenticate('forcedotcom'));\napp.get('/token', \n  passport.authenticate('forcedotcom', { failureRedirect: '/error' }),\n  function(req, res){\n    res.render(\"index\",checkSession(req));\n  });\n  \n  ```\n\nAnd as usual with passport, you can update the user serialization/de-serialization.\n\n\n###Example\nThere is an example app called `simple-example` in: `examples/` folder. This shows how to use ForceDotCom-Passport with lots of comments. \nTo run locally:\n\n1. Open `app.js` in `examples/simple-example`\n2. Set `CF_CLIENT_ID`, `CF_CLIENT_SECRET`, `CF_CALLBACK_URL` and optionally, `SF_AUTHORIZE_URL`,  `SF_TOKEN_URL` to match your connected app's settings.\n3. Install npm modules by running `npm install`\n4. Run: `node app.js`\n5. Open `localhost:3000` in the browser and try to login using OAuth.\n\n###Authors\n<a href='https://twitter.com/joshbirk' target='_blank'>Joshua Birk</a> & <a href='https://twitter.comrajaraodv' target='_blank'> Raja Rao DV </a>\n",
  "readmeFilename": "README.md",
  "_id": "passport-forcedotcom@0.0.2",
  "dist": {
    "shasum": "8d7417c5fb85e5658b4fdb20ee4e9d90385ec990"
  },
  "_from": "passport-forcedotcom"
}
