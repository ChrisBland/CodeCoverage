{
  "name": "passport-cloudfoundry",
  "version": "0.1.5",
  "description": "Cloud Foundry UAA OAuth2 authentication strategy for Passport.",
  "author": {
    "name": "Raja Rao DV",
    "email": "rajar@vmware.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rajaraodv/passport-cloudfoundry.git"
  },
  "bugs": {
    "url": "http://github.com/rajaraodv/passport-cloudfoundry/issues"
  },
  "main": "./lib/passport-cloudfoundry",
  "dependencies": {
    "pkginfo": "0.2.x",
    "passport-oauth": "0.1.x"
  },
  "devDependencies": {
    "vows": "0.6.x"
  },
  "scripts": {
    "test": "NODE_PATH=lib node_modules/.bin/vows test/*-test.js"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "keywords": [
    "passport",
    "cloudfoundry",
    "auth",
    "authn",
    "authentication",
    "identity",
    "oauth2",
    "oauth 2.0"
  ],
  "_from": "passport-cloudfoundry@>= 0.0.0",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "license": "BSD",
  "readme": "# Passport-CloudFoundry\n\n[Passport](https://github.com/jaredhanson/passport) strategy for authenticating\nwith [Cloud Foundry open PaaS](http://cloudfoundry.org/) using the OAuth 2.0 API.\n\n <p align='center'>\n<img src=\"https://github.com/rajaraodv/passport-cloudfoundry/raw/master/examples/login/pics/page3.png\" height=\"400px\" />\n</p>\n\n## Installation\n\n    $ npm install passport-cloudfoundry\n\n## Usage\n\n#### Configure Strategy\n\nThe CloudFoundry authentication strategy authenticates users using a CloudFoundry\naccount and OAuth 2.0 tokens.  The strategy requires a `verify` callback, which\naccepts these credentials and calls `done` providing a user, as well as\n`options` specifying a client ID, client secret, and callback URL.\n\n\n```javascript\n\nvar cfStrategy = new CloudFoundryStrategy({\n    clientID: CF_CLIENT_ID,\n    clientSecret: CF_CLIENT_SECRET,\n    callbackURL: CF_CALLBACK_URL\n}, function(accessToken, refreshToken, profile, done) { //verify callback\n    // asynchronous verification, for effect...\n    process.nextTick(function() {\n\n        // To keep the example simple, the user's CloudFoundry profile is returned to\n        // represent the logged-in user.  In a typical application, you would want\n        // to associate the CloudFoundry account with a user record in your database,\n        // and return that user instead.\n        return done(null, profile);\n    });\n});\n\n//****************************************\n// Examples 2 (w/ 'state' parameter):\n//****************************************\n\nvar CloudFoundryStrategy = require('passport-cloudfoundry').Strategy;\nvar cfStrategy = new CloudFoundryStrategy({\n    clientID: '123-456-789',\n    clientSecret: 'shhh-its-a-secret'\n    callbackURL: 'https://myapp.cloudfoundry.com/auth/cloudfoundry/callback',\n    passReqToCallback: true //<---- Pass this to get req (as 1st param)from CF.com to callback\n  },\n  function(req, accessToken, refreshToken, profile, done) {\n\n    //Verify things like 'state' in req.query (be sure to set: passReqToCallback=true)\n    if(req.query.state === 'stateValueIpreviouslySent') {\n        User.findOrCreate(..., function (err, user) {\n           done(err, user);\n       });\n    } else {\n       done({error: 'state value didnt match.. possible CSRF?'});\n    }\n  });\n\n\n // Set a callback to generate 'state' value.\n cfStrategy.setStateParamCallBack(generateState);\n\n Where.. 'generateState' generates new state and stores is somwhere\n and returns that random value back.\n\n // Temporarily store `state` ids\n var states = {};\n\n // Generates a random value to be used as 'state' param during authorization\n  function generateStateParam() {\n    var state = uuid.v4();\n    states[state] = true;\n    return state;\n  }\n\n // Finally, in your 'finalCallback',check if that state exists\n if(req.query.state && states[req.query.state]) {\n   done(null, user);\n   //delete it from memory\n   delete states[req.query.state];\n } else {\n   done({\"error\": 'state value didn't match. possible CSRF?'})\n }\n\n // Pass the strategy\n passport.use(cfStrategy);\n\n```\n\n#### Express middlewares\nIn Express apps, you need to add the below middlewares. Also make sure to add them after Express' session middleware\n\n```javascript\n// Initialize Passport!  Also use passport.session() middleware, to support\n// persistent login sessions (recommended).\n    app.use(passport.initialize());\n    app.use(passport.session());\n```\n\n#### Express routes\n\nFor passport to work, you need to add two routes.\n1.   `app.get('/auth/cloudfoundry'… ` to start OAuth\n2.   ` app.get('/auth/cloudfoundry/callback'…` to receive OAuth callback back from Cloud Foundry.\n    * NOTE: This must match your callback url's path that you used to register the app.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n```javascript\n\n    app.get('/auth/cloudfoundry',\n      passport.authenticate('cloudfoundry'),\n      function(req, res){\n        // The request will be redirected to CloudFoundry for authentication, so\n        // this function will not be called.\n      });\n\n    app.get('/auth/cloudfoundry/callback',\n      passport.authenticate('cloudfoundry', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n      w/ 'state' parameter (& verify/match it in the main callback to ensure no CSRF)\n      app.get('/auth/cloudfoundry',\n      passport.authenticate('cloudfoundry', {state: 'generateSomeRandomStateString'}),\n      function(req, res){\n        // The request will be redirected to CloudFoundry for authentication, so\n        // this function will not be called.\n      });\n```\n\n#### Logging out\nTo logout, call `req.logout()` AND `cfStrategy.reset()` like below:\n\n```javascript\napp.get('/', function(req, res) {\n    if(!req.user) {\n        req.session.destroy();\n        req.logout();\n        cfStrategy.reset(); //required!\n\n        return res.redirect('/login');\n    }\n    res.render('index', {\n        user: req.user\n    });\n});\n```\n\n\n\n-----\n\n## An Example OAuth2 App\n\nThe example app is located in the [/examples](https://github.com/rajaraodv/passport-cloudfoundry/tree/master/examples/login) folder. But here are the details.\n\n### Running the example app\n* Git clone this repo to `passport-cloudfoundry` folder (note `npm install` won't download examples, docs etc).\n* `cd passport-cloudfoundry/examples/login`\n* `npm install`\n* Open `login/app.js` and set `CF_CLIENT_ID`, `CF_CLIENT_SECRET` & `CF_CALLBACK_URL`\n  * You will get these info when you register your app (see below).\n\n```\n\n//Set Cloud Foundry app's clientID\nvar CF_CLIENT_ID = '--insert-cloudfoundry-client-id-here--';\n\n//Set Cloud Foundry app's clientSecret\nvar CF_CLIENT_SECRET = '--insert-cloudfoundry-client-secret-here--';\n\n// Note: You should have a app.get(..) for this callback to receive callback from Cloud Foundry\n// For example: If your callback url is: https://myKoolapp.cloudfoundry.com/auth/cloudfoundry/callback\n// then, you should have a HTTP GET endpoint like: app.get('/auth/cloudfoundry/callback', callback))\n//\nvar CF_CALLBACK_URL = '--insert-cloudfoundry--url--/auth/cloudfoundry/callback';\n```\n* `node app.js` to run app on `localhost:3000`\n  * PS: You should run this app at a pre-registered location that you provided during registering your app.\n* Open up browser & open the app.\n\n### Registering your app\n<OL>\n    <li>Register your app at Cloud Foundry at: <a href=\"http://support.cloudfoundry.com/\">http://support.cloudfoundry.com/</a></li>\n    <li>Provide your app name. e.g. MyCoolApp</li>\n    <li>Provide a app's server domain for callback. e.g. mycoolapp.cloudfoundry.com</li>\n</OL>\n\n### App Workflow\n Once the app is up and running, here is how it works:\n\n#### 1. You will see login page like below (Click on 'Login with Cloud Foundry' link): ####\n <p align='center'>\n<img src=\"https://github.com/rajaraodv/passport-cloudfoundry/raw/master/examples/login/pics/page1.png\" height=\"400px\" width=\"550px\" />\n</p>\n\n####2. Your browser will be redirected to https://login.cloudfoundry.com/login (default auth url): ####\n <p align='center'>\n<img src=\"https://github.com/rajaraodv/passport-cloudfoundry/raw/master/examples/login/pics/page2.png\" height=\"400px\" width=\"550px\" />\n</p>\n\n####3. If you Sign-in using your cloudfoundry.com account, you will see ####\n <p align='center'>\n<img src=\"https://github.com/rajaraodv/passport-cloudfoundry/raw/master/examples/login/pics/page3.png\" height=\"400px\" width=\"550px\" />\n</p>\n\n#### 4. If you Approve, browser will redirect you to your app w/ access_token & user info. And you will see: ####\n <p align='center'>\n<img src=\"https://github.com/rajaraodv/passport-cloudfoundry/raw/master/examples/login/pics/page4.png\" height=\"400px\" width=\"550px\" />\n</p>\n\n------\n\n\n## Tests\n\n    $ npm install --dev\n    $ make test\n\n\n\n## Credits\n\n  - [Raja Rao DV](http://github.com/rajaraodv)\n\n## License\n(MIT)\nVMware\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "passport-cloudfoundry@0.1.5",
  "dist": {
    "shasum": "3043159aa88752956a6c93bc928d7cab5be96b82"
  },
  "_resolved": "https://registry.npmjs.org/passport-cloudfoundry/-/passport-cloudfoundry-0.1.5.tgz"
}
